{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","region","className","src","alt","CardList","cardsArray","avatars","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","onCountChange","count","onButtonSubmit","fetch","then","response","json","users","filterAvatars","filter","avatar","surname","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAgBeA,EAdF,SAAC,GAA8B,EAA7BC,GAA8B,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,OAC5B,OACI,yBAAKC,UAAY,qDAEb,yBAAKC,IAAG,8BAAyBJ,GAAQK,IAAI,YAC7C,6BACI,4BAAKL,GACL,2BAAIC,GACJ,4BAAKC,MCgBNI,EAvBE,SAAC,GAAe,IACvBC,EADsB,EAAbC,QACYC,KAAI,SAACC,EAAMC,GAKlC,OACQ,kBAAC,EAAD,CACIC,IAAKD,EACLZ,GAAIW,EAAKX,GACTC,KAAMU,EAAKV,KACXC,MAAOS,EAAKT,WAK5B,OACI,6BACKM,ICPEM,EAZG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKX,UAAU,OACX,2BACIA,UAAU,mCACVY,KAAK,SACLC,YAAY,iBACZC,SAAUH,MCCXI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,WCiBJC,E,YAnBX,WAAYN,GAAO,IAAD,8BACd,4CAAMA,KACDO,MAAQ,CACTC,UAAU,GAHA,E,+EAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SACH,0DAEJG,KAAKX,MAAMK,a,GAhBCQ,aC+DZC,G,uBArDX,aAAc,IAAD,8BACT,+CAeJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAjBhC,EAoBbC,cAAgB,SAACJ,GACb,EAAKJ,SAAS,CAACS,MAAOL,EAAME,OAAOC,SArB1B,EAwBbG,eAAiB,SAACN,GACd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAvBzC,EAAKZ,MAAQ,CACTlB,QAAS,GACT4B,YAAa,GACbI,MAAO,IALF,E,iFASO,IAAD,OACfE,MAAM,8CAELC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKf,SAAS,CAACvB,QAASsC,S,+BAelC,IAAD,EAC2BhB,KAAKJ,MAA7BlB,EADH,EACGA,QAAS4B,EADZ,EACYA,YACVW,EAAgBvC,EAAQwC,QAAQ,SAAAC,GAClC,OAAQA,EAAOjD,KAAO,IAAMiD,EAAOC,SAASC,cAAcC,SAAShB,EAAYe,kBAGnF,OAAI3C,EAAQ6C,OAIJ,yBAAKlD,UAAU,MACX,wBAAIA,UAAU,MAAd,mBAEA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU1B,QAAWuC,OAT9B,2C,GApCDf,cCCEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.41e85850.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({id, name, email, region}) => {\r\n    return (\r\n        <div className = 'tc bg-moon-gray dib br3 pa1 ma2 grow bw2 shadow-5'>\r\n            {/* <img src={`https://robohash.org/${id}?100x100`} alt=\"robots\"/> */}\r\n            <img src={`http://flathash.com/${name}`} alt=\"avatars\"/>  \r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n                <h4>{region}</h4>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({avatars}) => {\r\n    const cardsArray = avatars.map((user, i) => {\r\n        // Below code was added to demo the 'Error Boundry' feature introduced in React 16 .\r\n        // if(true){\r\n        //     throw new Error('NOOOOOOO!');\r\n        // }\r\n        return (\r\n                <Card \r\n                    key={i} \r\n                    id={user.id} \r\n                    name={user.name /*+ \" \" + user.surname*/} \r\n                    email={user.email}\r\n                    /*region={user.region}*/\r\n                />\r\n        );\r\n    })\r\n    return(\r\n        <div>\r\n            {cardsArray}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return(\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa2 ba b--green bg-lightest-grey'\r\n                type=\"search\" \r\n                placeholder=\"Search Friends\"\r\n                onChange={searchChange}\r\n            />\r\n        </div>        \r\n    );\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{overflowY: 'scroll', border: '2px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false,\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1> Oooops. That is not good.</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n// import Button from '../components/Button';\r\n// import InputBar from '../components/InputBar';\r\nimport 'tachyons';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            avatars: [],\r\n            searchfield: '',\r\n            count: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        // fetch('https://uinames.com/api/?region=india&amount=25&gender=male&ext') --> This link is not working anymore.\r\n        .then(response => response.json())\r\n        .then(users => this.setState({avatars: users}));\r\n    }\r\n\r\n    onSearchChange = (event) => {       \r\n        this.setState({searchfield: event.target.value})\r\n    }\r\n\r\n    onCountChange = (event) => {       \r\n        this.setState({count: event.target.value})\r\n    }\r\n\r\n    onButtonSubmit = (event) => {       \r\n        this.setState({searchfield: event.target.value})\r\n    }\r\n\r\n    render(){\r\n        const {avatars, searchfield} = this.state;\r\n        const filterAvatars = avatars.filter( avatar => {\r\n            return (avatar.name + \" \" + avatar.surname).toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n\r\n        if(!avatars.length)\r\n            return <h1>Loading</h1>\r\n        else{\r\n            return(\r\n                <div className='tc'>\r\n                    <h1 className='f2'>Virtual Friends</h1>\r\n                    {/* <InputBar onButtonSubmit={this.onButtonSubmit} onCountChange={this.onCountChange}/> */}\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList avatars = {filterAvatars}/>\r\n                        </ErrorBoundry>                       \r\n                    </Scroll> \r\n                </div>    \r\n            );\r\n        }        \r\n    }   \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}